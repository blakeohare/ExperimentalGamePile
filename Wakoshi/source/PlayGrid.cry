import Graphics2D;
import Math;
import Random;
import TwoCansAlpha4;

const TILE_QUEUE_COUNTER_MAX = FPS * 1 / 4;

class PlayGrid {
	
	field grid;
	field focusedItem = null; // coordinates
	field lastTouchPoint = null;
	field addTileQueue = [];
	field addTileQueueCounter = -1;
	
	field allOuterSquaresNoIncinerator = [];
	field youLost = false;
	
	field incineratorLookup = {};
	
	constructor() {
		this.grid = make_grid(9, 9);
		
		this.incineratorLookup[0] = true;
		this.incineratorLookup[8] = true;
		this.incineratorLookup[8 * 9] = true;
		this.incineratorLookup[8 * 9 + 8] = true;
		
		for (y = 0; y < 9; ++y) {
			for (x = 0; x < 9; ++x) {
				if (!(x >= 3 && x < 6 && y >= 3 && y < 6)) {
					if (this.incineratorLookup.get(y * 9 + x) == null) {
						this.allOuterSquaresNoIncinerator.add([x, y]);
					}
				}
			}
		}
		this.allOuterSquaresNoIncinerator.shuffle();
		
		tileStarterColors = [1, 2, 3, 4, 5, 6] * 4;
		for (i = 0; i < tileStarterColors.length; ++i) {
			color = tileStarterColors[i];
			xy = this.allOuterSquaresNoIncinerator[i];
			x = xy[0];
			y = xy[1];
			tile = new Tile(color);
			this.grid[x][y] = tile;
			tile.col = x;
			tile.row = y;
		}
	}
	
	function getCurrentFinishedConfiguration() {
		if (this.grid[3][3] == null || this.grid[5][5] == null) return null;
		output = [];
		for (y = 3; y < 6; ++y) {
			for (x = 3; x < 6; ++x) {
				t = this.grid[x][y];
				if (t != null) {
					output.add(t.color);
				} else {
					return null;
				}
			}
		}
		return output;
	}
	
	function zapCenter() {
		for (y = 3; y < 6; ++y) {
			for (x = 3; x < 6; ++x) {
				t = this.grid[x][y];
				t.dead = true;
				this.grid[x][y] = null;
			}
		}
		this.focusedItem = null;
		this.addTileQueueCounter = 0;
		for (i = 0; i < 6; ++i) {
			this.addTileQueue.add(Random.randomInt(6) + 1);
		}
	}
	
	function update(events) {
		for (event : events) {
			switch (event.type) {
				case EventType.MOUSE_PRESS:
					this.mouseDown(event.x, event.y);
					break;
				case EventType.MOUSE_RELEASE:
					this.mouseUp(event.x, event.y);
					break;
				case EventType.MOUSE_MOVE:
					this.mouseMove(event.x, event.y);
					break;
			}
		}
		
		this.updateTileQueue();
	}
	
	function updateTileQueue() {
		if (this.addTileQueue.length == 0) return;
		--this.addTileQueueCounter;
		if (this.addTileQueueCounter > 0) return;
		this.addTileQueueCounter = TILE_QUEUE_COUNTER_MAX;
		this.addTileToScreenOrTriggerLose(this.addTileQueue.pop());
	}
	
	function addTileToScreenOrTriggerLose(color = null) {
	
		this.allOuterSquaresNoIncinerator.shuffle();
		addHere = null;
		for (xy : this.allOuterSquaresNoIncinerator) {
			x = xy[0];
			y = xy[1];
			if (this.grid[x][y] == null) {
				addHere = xy;
			}
		}
		if (addHere == null) {
			this.triggerLose();
			return;
		}
		x = addHere[0];
		y = addHere[1];
		tile = new Tile(color ?? (Random.randomInt(6) + 1));
		this.grid[x][y] = tile;
		tile.col = x;
		tile.row = y;
	}
	
	function triggerLose() {
		print("You lost");
		this.youLost = true;
	}
	
	function mouseDown(px, py) {
		if (this.focusedItem != null) return;
		xy = this.convertPixelCoordsToGridCoords(px, py);
		if (xy == null) return;
		tile = this.grid[xy % 9][xy / 9];
		if (tile == null) return;
		this.focusedItem = xy;
		this.lastTouchPoint = [px, py];
	}
	
	function mouseUp(px, py) {
		this.mouseMove(px, py);
		this.focusedItem = null;
	}
	
	function mouseMove(px, py) {
		if (this.focusedItem == null) return;
		xy = this.convertPixelCoordsToGridCoords(px, py);
		if (xy == null) return;
		if (xy != this.focusedItem) {
			oldX = this.focusedItem % 9;
			oldY = this.focusedItem / 9;
			newX = xy % 9;
			newY = xy / 9;
			dx = newX - oldX;
			dy = newY - oldY;
			// apply X and Y components individually.
			// If they cared about not ambiguously going over diagonals, they wouldn't move so fast.
			
			// apply X.
			if (dx != 0) {
				this.tryMoveCursorTo(oldX, oldY, newX, oldY);
				if (this.focusedItem == null) {
					return;
				}
				// query the result of the previous move
				newX = this.focusedItem % 9;
				oldX = newX;
			}
			
			// apply Y.
			if (dy != 0) {
				this.tryMoveCursorTo(oldX, oldY, newX, newY);
			}
		}
	}
	
	function tryMoveCursorTo(oldX, oldY, newX, newY) {
		// Note: this will only be called with strictly vertical or horizontal movement.
		
		dx = newX - oldX;
		dy = newY - oldY;
		stepX = Math.sign(dx);
		stepY = Math.sign(dy);
		
		if (stepX != 0 && stepY != 0) {
			throw new Exception();
		}
		prevX = oldX;
		prevY = oldY;
		walkX = oldX + stepX;
		walkY = oldY + stepY;
		stopX = newX + stepX;
		stopY = newY + stepY;
		while (walkX != stopX || walkY != stopY) {
			if (this.grid[walkX][walkY] != null) {
				return;
			}
			
			// cell is empty. move the box.
			tile = this.grid[prevX][prevY];
			this.moveTileTo(tile, walkX, walkY);
			if (tile.dead) {
				this.focusedItem = null;
				return;
			}
			this.focusedItem = walkX + walkY * 9;
			
			prevX = walkX;
			prevY = walkY;
			walkX += stepX;
			walkY += stepY;
		}
	}
	
	function moveTileTo(tile, x, y) {
		oldX = tile.col;
		oldY = tile.row;
		if (oldX == x && oldY == y) return;
		
		this.grid[x][y] = tile;
		this.grid[oldX][oldY] = null;
		tile.col = x;
		tile.row = y;
		flattenedCoords = x + y * 9;
		if (this.incineratorLookup.get(flattenedCoords, false)) {
			tile.dead = true;
			this.grid[x][y] = null;
			this.addTileToScreenOrTriggerLose();
			this.addTileToScreenOrTriggerLose();
		}
	}
	
	function convertPixelCoordsToGridCoords(px, py) {
		x = (px - GRID_PX_OFFSET) / TILE_WIDTH;
		y = (py - GRID_PY_OFFSET) / TILE_WIDTH;
		if (x < 0 || y < 0) return null;
		if (x >= 9 || y >= 9) return null;
		return y * 9 + x;
	}
	
	function getIncinceratorColor(rc) {
		r1 = 255;
		g1 = 20;
		r2 = 128;
		g2 = 128;
		
		return [
			Math.floor(40 * Math.sin(3.14159 * 2 / 15 * rc)) + 200,
			Math.floor(50 * Math.sin(3.14159 * 2 / 10 * rc)) + 60,
			0];
	}
	
	function render(px, py, rc) {
		innerLeft = px + TILE_WIDTH * 3;
		innerWidth = TILE_WIDTH * 3;
		innerTop = py + TILE_WIDTH * 3;
		innerHeight = TILE_WIDTH * 3;
		innerRight = innerLeft + innerWidth;
		innerBottom = innerTop + innerHeight;
		
		Graphics2D.Draw.rectangle(px, py, TILE_WIDTH * 9, TILE_WIDTH * 9, 40, 40, 40);
		Graphics2D.Draw.rectangle(innerLeft, innerTop, innerWidth, innerHeight, 140, 140, 140);
		
		rgb = this.getIncinceratorColor(rc);
		for (icoord : this.incineratorLookup.keys()) {
			iCol = icoord % 9;
			iRow = icoord / 9;
			ix = px + TILE_WIDTH * iCol;
			iy = py + TILE_WIDTH * iRow;
			
			
			
			Graphics2D.Draw.rectangle(ix, iy, TILE_WIDTH, TILE_WIDTH, 255, 255, 100);
			Graphics2D.Draw.rectangle(ix + 2, iy + 2, TILE_WIDTH - 4, TILE_WIDTH - 4, rgb[0], rgb[1], rgb[2]);
		}
		
		for (y = 0; y < 9; ++y) {
			for (x = 0; x < 9; ++x) {
				tile = this.grid[x][y];
				if (tile != null) {
					tile.age++;
					tx = x * TILE_WIDTH + px + TILE_WIDTH / 2;
					ty = y * TILE_WIDTH + py + TILE_WIDTH / 2;
					if (tile.renderX == null) {
						tile.renderX = tx;
						tile.renderY = ty;
					}
					if (tile.renderX != tx || tile.renderY != ty) {
						rx = (tile.renderX * 1 + tx) / 2;
						ry = (tile.renderY * 1 + ty) / 2;
						
						dx = tx - rx;
						dy = ty - ry;
						if (dx ** 2 + dy ** 2 < 3) {
							rx = tx;
							ry = ty;
						} else {
							tx = rx;
							ty = ry;
						}
						
						tile.renderX = rx;
						tile.renderY = ry;
					}
					r = Math.min(TILE_WIDTH / 2, (tile.age * 2));
					left = tx - r;
					top = ty - r;
					tw = r * 2;
					
					rgb = tile.rgb;
					Graphics2D.Draw.rectangle(left, top, tw, tw, rgb[0], rgb[1], rgb[2]);
				}
			}
		}
		
		color = 120 + Math.floor(120 * Math.sin(rc * 2 * 3.14159 / 10));
		Graphics2D.Draw.line(innerLeft, innerTop, innerLeft, innerBottom, 3, color, color, color);
		Graphics2D.Draw.line(innerLeft, innerTop, innerRight, innerTop, 3, color, color, color);
		Graphics2D.Draw.line(innerRight, innerBottom, innerLeft, innerBottom, 3, color, color, color);
		Graphics2D.Draw.line(innerRight, innerBottom, innerRight, innerTop, 3, color, color, color);
	}
}
